---
- name: K8s PreReq | Ensure APT keyrings directory exists
  ansible.builtin.file:
    name: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: K8s PreReq | Create temporary file for GPG keys
  ansible.builtin.tempfile:
    state: file
    suffix: k8s_prereq
  register: tempfile

- name: K8s PreReq | Docker repository
  block:
  - name: K8s PreReq | Docker repository | Download Docker GPG file for the keyring
    ansible.builtin.get_url:
      url: https://download.docker.com/linux/ubuntu/gpg
      dest: '{{ tempfile.path }}'
      checksum: sha256:{{ checksums.docker }}

  - name: K8s PreReq | Docker repository | De-armor Docker GPG key
    ansible.builtin.shell: gpg --dearmor < {{ tempfile.path }} > /etc/apt/keyrings/docker.gpg
    changed_when: false
    no_log: true

  - name: K8s PreReq | Docker repository | Add Docker's repository to APT sources list
    ansible.builtin.apt_repository:
      repo: >
        deb [arch={{ ansible_architecture }}
        signed-by=/etc/apt/keyrings/docker.gpg]
        https://download.docker.com/linux/ubuntu
        {{ ansible_lsb.codename }}
        stable
      state: present
  when: tempfile.path is defined

- name: K8s PreReq | Kubernetes repository
  block:
  - name: K8s PreReq | Kubernetes repository | Download Kubernetes ASC file for the keyring
    ansible.builtin.get_url:
      url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
      dest: '{{ tempfile.path }}'
      checksum: sha256:{{ checksums.kubernetes }}

  - name: K8s PreReq | Kubernetes repository | De-armor Docker GPG key
    ansible.builtin.shell: gpg --dearmor < {{ tempfile.path }} > /etc/apt/keyrings/kubernetes.gpg
    changed_when: false
    no_log: true

  - name: K8s PreReq | Kubernetes repository | Add Kubernetes repository to APT sources list
    ansible.builtin.apt_repository:
      repo: >
        deb [arch={{ ansible_architecture }}
        signed-by=/etc/apt/keyrings/kubernetes.gpg]
        https://pkgs.k8s.io/core:/stable:/{{ k8s_version }}/deb/
        /
      state: present
  when: tempfile.path is defined

- name: K8s PreReq | Install required packages
  ansible.builtin.apt:
    name: '{{ item }}'
    state: present
    update_cache: yes
  loop:
    - '{{ packages.generic }}'
    - '{{ packages.containerd }}'
    - '{{ packages.kubernetes }}'
  register: reg_apt_install
  until: reg_apt_install is succeeded
  retries: 5
  delay: 30

- name: K8s PreReq | Mark K8s packages to prevent upgrades
  ansible.builtin.dpkg_selections:
    name: '{{ item }}'
    selection: hold
  loop: '{{ packages.kubernetes }}'

- name: K8s PreReq | Containerd
  block:
  - name: K8s PreReq | Containerd | Create default Containerd config
    ansible.builtin.shell: containerd config default > /etc/containerd/config.toml

  - name: K8s PreReq | Containerd | Set SystemdCgroup to true for Containerd
    ansible.builtin.replace:
      path: /etc/containerd/config.toml
      regexp: '^(\s*SystemdCgroup\s*=\s*)false(\s*)$'
      replace: '\1true\2'

  - name: K8s PreReq | Containerd | Enable and restart Containerd service
    ansible.builtin.systemd_service:
      name: containerd
      enabled: true
      state: restarted

- name: K8s PreReq | Disable and stop UFW firewall service
  ansible.builtin.systemd_service:
    name: ufw
    enabled: false
    state: stopped

- name: K8s PreReq | Add persistent configuration file for kernel modules
  ansible.builtin.copy:
    content: |
      overlay
      br_netfilter
    dest: /etc/modules-load.d/k8s.conf
    owner: root
    group: root
    mode: '0644'

- name: K8s PreReq | Load kernel modules for K8s
  community.general.modprobe:
    name: '{{ item }}'
    state: present
  loop:
    - overlay
    - br_netfilter

- name: K8s PreReq | Copy kernel parameters configuration file
  ansible.builtin.template:
    src: 10-kubernetes.conf.j2
    dest: /etc/sysctl.d/10-kubernetes.conf
    owner: root
    group: root
    mode: '0644'

- name: K8s PreReq | Get kernel parameters and apply them at runtime
  ansible.builtin.sysctl:
     name: '{{ item.key }}'
     value: '{{ item.value }}'
     state: present
     sysctl_set: true
     reload: yes
     sysctl_file: /etc/sysctl.d/10-kubernetes.conf
  with_dict: '{{ sysctl_config }}'
